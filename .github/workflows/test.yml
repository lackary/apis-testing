name: pytest-testing

on:
  push:
    branches: ["main"]
    # tags: ["v*"] # Uncomment if you want to trigger on tags
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 0 * * *" # Runs every day at midnight UTC+8
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    outputs:
      RUN_ID: ${{ steps.run_pytest.outputs.run_id }}

    env:
      UNSPLASH_ACCESS_KEY: ${{ secrets.UNSPLASH_ACCESS_KEY }}
      # RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
      # TS: ${{ github.run_attempt }}-${{ github.run_started_at }}

    steps:
      - name: ⬇️ Checkout code
        uses: actions/checkout@v3

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: 🐍 Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: 📦 Install dependencies for apis-testing
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 📦 Install dependencies for Allure
        run: |
          sudo apt-get update
          sudo apt-get install -y default-jre-headless

      - name: Install Allure CLI
        run: |
          ALLURE_VERSION="2.34.0"
          DEB_PACKAGE="allure_${ALLURE_VERSION}-1_all.deb"
          wget https://github.com/allure-framework/allure2/releases/download/${ALLURE_VERSION}/${DEB_PACKAGE}
          sudo dpkg -i ${DEB_PACKAGE}
          rm ${DEB_PACKAGE}

      - name: Check Allure CLI
        run: |
          which allure
          allure --version

        # shell: bash

      # - name: Set RUN_ID
      #   run: echo "RUN_ID=$GITHUB_RUN_ID" >> $GITHUB_ENV

      - name: Make script executable
        run: chmod +x run-pytest.sh

      - name: Run pytest shell script
        id: run_pytest
        run: |
          RUN_OUTPUT=$(./run-pytest.sh)
          echo "$RUN_OUTPUT"
          RUN_ID=$(echo "$RUN_OUTPUT" | tail -n 1)
          echo "RUN_ID=$RUN_ID" >> $GITHUB_OUTPUT

      - name: Publish JUnit Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Pytest JUnit Results
          path: test-reports/test-${{ steps.run_pytest.outputs.RUN_ID }}.xml
          reporter: java-junit
          # Ensure the report is always published
          fail-on-error: false

      - name: 📤 Upload test-reports folder
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ github.event.repository.name }}-${{ github.run_number }}
          path: test-reports/
          retention-days: 1

  deploy:
    needs: test
    runs-on: ubuntu-latest
    # Only deploy on main branch or on manual trigger
    # if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download reports artifact
        uses: actions/download-artifact@v4
        with:
          name: reports-${{ github.event.repository.name }}-${{ github.run_number }}
          path: test-reports

      - name: Generate index.html for GitHub Pages
        run: |
          RUN_ID=${{ needs.test.outputs.RUN_ID }}
          BASE_URL="https://lackary.github.io/apis-testing"

          echo "<html><body>" > index.html
          echo "<h1>Test Reports</h1>" >> index.html

          echo "<h2>Allure Report</h2>" >> index.html
          echo "<a href='${BASE_URL}/test-reports/allure/reports/report-${RUN_ID}/index.html'>Allure Report</a><br><br>" >> index.html

          echo "<h2>Pytest HTML Report</h2>" >> index.html
          echo "<a href='${BASE_URL}/test-reports/report-${RUN_ID}.html'>Pytest HTML</a><br><br>" >> index.html

          echo "<h2>Coverage Report</h2>" >> index.html
          echo "<a href='${BASE_URL}/test-reports/pytest-cov/cov-${RUN_ID}-html/index.html'>Coverage Report</a><br><br>" >> index.html

          echo "</body></html>" >> index.html

      - name: Prepare deploy-pages folder
        run: |
          mkdir -p deploy-pages
          cp -r test-reports deploy-pages/
          cp index.html deploy-pages/

      - name: Deploy only index.html and test-reports to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./deploy-pages
          publish_branch: gh-pages
          force_orphan: true
          destination_dir: ""

      - name: Show deployed report URLs
        run: |
          echo "### Allure Report URL" >> $GITHUB_STEP_SUMMARY
          echo "https://lackary.github.io/apis-testing/test-reports/allure/reports/report-${{ needs.test.outputs.RUN_ID  }}/index.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pytest HTML Report URL" >> $GITHUB_STEP_SUMMARY
          echo "https://lackary.github.io/apis-testing/test-reports/report-${{ needs.test.outputs.RUN_ID  }}.html" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Coverage Report URL" >> $GITHUB_STEP_SUMMARY
          echo "https://lackary.github.io/apis-testing/test-reports/pytest-cov/cov-${{ needs.test.outputs.RUN_ID  }}-html/index.html" >> $GITHUB_STEP_SUMMARY
